try(source('../R/calls.R'), silent=TRUE)
getwd()
setwd('./openFoodwrappeR')
try(source('./R/calls.R'), silent=TRUE)
#test test
test_that("Factorial of number $n", {
expect_equal(factorial(5), 120)
expect_identical(factorial(2), 2)
expect_equal(factorial(8), 40320)
}
)
build_URL('12345')
#build_URL test
test_that("O.F.F. API URL for product number: $n", {
expect_equal(build_URL('12345'), 'https://world-en.openfoodfacts.org/api/v0/product/12345.json')
}
)
1:24
#' Get a product.
#'
#' This function retrieves a .json file for a product.
#' @param term The name of the product to search for.
#' @param chars The number of characters from the product name to print.
#' @param num The product number (1:24) to retrieve.
#' @param country The country code. Searches only for products in the given country.
#' @export
#' @examples
#' product()
product = function(term, chars=30, num=NA, country='world'){
lst = search_by_name(term, country)
cat("Number", "\t | \t", "Name", "\n")
cat("-------------------------", "\n")
for (i in 1:nrow(lst)){
cat(i, "\t | \t", substr(as.character(lst[i, 1]), 1, chars), " ... \n")
Sys.sleep(0.1)
}
cat("Please select the \'Number\' of the product: \n")
if(interactive()){
while (!(num %in% c(1:24))){
num = readline()
if (!(num %in% c(1:24))){
cat("Please enter a number between 1 and 24! \n")
}
}
} else {
num = 1
}
return(product_by_prodnum(lst[num, 2]))
}
product('eggs')
is.character(4)
is.character('4')
#' Get a product.
#'
#' This function retrieves a .json file for a product.
#' @param term The name of the product to search for.
#' @param chars The number of characters from the product name to print.
#' @param num The product number (1:24) to retrieve.
#' @param country The country code. Searches only for products in the given country.
#' @export
#' @examples
#' product()
product = function(term, chars=30, num=NA, country='world'){
if (!(is.character(term))){
stop("\'term\' must be a string!")
}
lst = search_by_name(term, country)
cat("Number", "\t | \t", "Name", "\n")
cat("-------------------------", "\n")
for (i in 1:nrow(lst)){
cat(i, "\t | \t", substr(as.character(lst[i, 1]), 1, chars), " ... \n")
Sys.sleep(0.1)
}
cat("Please select the \'Number\' of the product: \n")
if(interactive()){
while (!(num %in% c(1:24))){
num = readline()
if (!(num %in% c(1:24))){
cat("Please enter a number between 1 and 24! \n")
}
}
} else {
num = 1
}
return(product_by_prodnum(lst[num, 2]))
}
product(eggs)
product(4)
product('4')
#troubleshooting unit testing
library('testthat')
try(source('./R/calls.R'), silent=TRUE)
#test test
test_that("Factorial of number $n", {
expect_equal(factorial(5), 120)
expect_identical(factorial(2), 2)
expect_equal(factorial(8), 40320)
}
)
#build_URL test
test_that("O.F.F. API URL for product number: $n", {
expect_equal(build_URL('12345'), 'https://world-en.openfoodfacts.org/api/v0/product/12345.json')
}
)
#retrieve_countries test
test_that("Is printing of \'countries\' successful?", {
expect_ouput(retrieve_countries())
}
)
r
test_that("Is printing of \'countries\' successful?", {
expect_ouput(r)
}
)
test_that("Is printing of \'countries\' successful?", {
expect_ouput('r')
}
)
test_that("Is printing of \'countries\' successful?", {
expect_ouput(print9'r'))
test_that("Is printing of \'countries\' successful?", {
expect_ouput(print('r'))
}
)
#troubleshooting unit testing
library('testthat')
#build_URL test
test_that("O.F.F. API URL for product number: $n", {
expect_equal(build_URL('12345'), 'https://world-en.openfoodfacts.org/api/v0/product/12345.json')
}
)
#retrieve_countries test
test_that("Is printing of \'countries\' successful?", {
expect_ouput(retrieve_countries())
}
)
testthat::expect_output("r")
testthat::expect_output(print("r"))
#retrieve_countries test
test_that("Is printing of \'countries\' successful?", {
testthat::expect_ouput(retrieve_countries())
}
)
#retrieve_countries test
test_that("Is printing of \'countries\' successful?", {
expect_output(retrieve_countries())
}
)
#' Update countries.
#'
#' This function updates the list of available countries using the API. Warning: resulting 'countries' variable is written to the global env.
#' @export
#' @examples
#' update_countries()
update_countries = function(){
check_internet()
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
y = c()
z = c()
for (i in 1:length(x)){
if ((!is.null(x[[i]]$country_code_2[[1]])) & (!is.null(x[[i]]$name$en))){
y = c(y, tolower(x[[i]]$country_code_2[[1]]))
z = c(z, x[[i]]$name$en)
}
}
a = data.frame(z, y)
assign("countries", a, envir = .GlobalEnv)
return(a)
}
update_countries()
#' Update countries.
#'
#' This function updates the list of available countries using the API. Warning: resulting 'countries' variable is written to the global env.
#' @export
#' @examples
#' update_countries()
update_countries = function(){
check_internet()
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
y = c()
z = c()
for (i in 1:length(x)){
if ((!is.null(x[[i]]$country_code_2[[1]])) & (!is.null(x[[i]]$name$en))){
y = c(y, tolower(x[[i]]$country_code_2[[1]]))
z = c(z, x[[i]]$name$en)
}
}
a = data.frame(z, y)
assign("countries", a, envir = .GlobalEnv)
if(!(interactive())){
return(a)
}
}
update_countries()
testthat::expect_true()
is.data.frame(countrires)
is.data.frame(countries)
#check_internet test
test_that("Do we have an internet connection? Expect TRUE.", {
expect_true(check_internet())
}
)
check_internet()
#check_internet test
test_that("Do we have an internet connection? Expect TRUE.", {
expect_silent(check_internet())
}
)
#product function test
test_that("Testing product function", {
expect_failure(product(4))
}
)
#product function test
test_that("Testing product function", {
expect_error(product(4))
}
)
x = product('eggs')
typeof(x)
#product function test
test_that("Testing product function", {
expect_error(product(4))
expect_s3_class(product('eggs'), 'list')
}
)
#product function test
test_that("Testing product function", {
expect_error(product(4))
expect_type(product('eggs'), 'list')
}
)
search_by_name(4)
#' Search Product by Name
#'
#' This function allows you to express your love of cats.
#' @param term The name of the product to search for.
#' @param country The country code. Searches only for products in the given country.
#' @export
#' @examples
#' search_by_name()
search_by_name = function(term, country='world'){
check_internet()
if (!(is.character(term))){
stop("\'term\' must be a string!")
}
require(httr); require(XML)
req = httr::content(httr::GET(paste0('https://', country, '.openfoodfacts.org/cgi/search.pl?search_terms=', term, '&search_simple=1&action=process')), 'parse')
resXML = XML::htmlParse(req)
lst = XML::getNodeSet(resXML, "//*[@class='products']/li")
titles = c()
prodnums = c()
for (i in 1:length(lst)){
titles = c(titles, gsub(".*<span>|</span>.*", "", XML::toString.XMLNode(lst[[i]])))
prodnums = c(prodnums, gsub(".*href=\"/product/|/.*", "", XML::toString.XMLNode(lst[[i]])))
}
return(data.frame('titles'=as.character(titles), 'prodnums'=as.character(prodnums)))
}
#' Product by Product Number
#'
#' If you already know the product number of the product you want, you can use this function to retrieve the .json.
#' @param prodnum The product number. Passed from product function.
#' @export
#' @examples
#' product_by_prodnum()
product_by_prodnum = function(prodnum, filters=''){
check_internet()
url = build_URL(prodnum, filters)
return(jsonlite::fromJSON(txt=url))
}
#' Get a product.
#'
#' This function retrieves a .json file for a product.
#' @param term The name of the product to search for.
#' @param chars The number of characters from the product name to print.
#' @param num The product number (1:24) to retrieve.
#' @param country The country code. Searches only for products in the given country.
#' @export
#' @examples
#' product()
product = function(term, chars=30, num=NA, country='world'){
lst = search_by_name(term, country)
cat("Number", "\t | \t", "Name", "\n")
cat("-------------------------", "\n")
for (i in 1:nrow(lst)){
cat(i, "\t | \t", substr(as.character(lst[i, 1]), 1, chars), " ... \n")
Sys.sleep(0.1)
}
cat("Please select the \'Number\' of the product: \n")
if(interactive()){
while (!(num %in% c(1:24))){
num = readline()
if (!(num %in% c(1:24))){
cat("Please enter a number between 1 and 24! \n")
}
}
} else {
num = 1
}
return(product_by_prodnum(lst[num, 2]))
}
search_by_name(4)
product(4)
search_by_name('eggs')
x = search_by_name('eggs')
typeof(x)
class(x)
expect_s3_class(search_by_name('eggs'), 'data.frame')
#search_by_name test
test_that("Testing search_by_name function", {
expect_error(search_by_name(4))
expect_s3_class(search_by_name('eggs'), 'data.frame')
}
)
#' Product by Product Number
#'
#' If you already know the product number of the product you want, you can use this function to retrieve the .json.
#' @param prodnum The product number. Passed from product function.
#' @export
#' @examples
#' product_by_prodnum()
product_by_prodnum = function(prodnum, filters=''){
check_internet()
if (!(is.character(prodnum))){
stop("\'prodnum\' must be a string!")
}
url = build_URL(prodnum, filters)
return(jsonlite::fromJSON(txt=url))
}
product_by_prodnum(4)
search_by_name('eggs')
#search_by_name test
test_that("Testing search_by_name function", {
expect_error(search_by_name(4))
expect_s3_class(search_by_name('eggs'), 'data.frame')
}
)
product_by_prodnum('80310891')
x = product_by_prodnum('80310891')
class(x)
typeof(x)
#product_by_prodnum test
test_that("Testing product_by_prodnum function", {
expect_error(product_by_prodnum(4))
expect_s3_class(product_by_prodnum('80310891'), 'list')
}
)
#search_by_name test
test_that("Testing search_by_name function", {
expect_error(search_by_name(4))
expect_s3_class(search_by_name('eggs'), 'data.frame')
}
)
#product_by_prodnum test
test_that("Testing product_by_prodnum function", {
expect_error(product_by_prodnum(4))
expect_s4_class(product_by_prodnum('80310891'), 'list')
}
)
#product_by_prodnum test
test_that("Testing product_by_prodnum function", {
expect_error(product_by_prodnum(4))
expect_type(product_by_prodnum('80310891'), 'list')
}
)
#' Get a product.
#'
#' This function retrieves a .json file for a product.
#' @param term The name of the product to search for.
#' @param chars The number of characters from the product name to print.
#' @param num The product number (1:24) to retrieve.
#' @param country The country code. Searches only for products in the given country.
#' @export
#' @examples
#' product()
product = function(term, chars=30, num=NA, country='world'){
lst = search_by_name(term, country)
cat("Number", "\t | \t", "Name", "\n")
cat("-------------------------", "\n")
for (i in 1:nrow(lst)){
cat(i, "\t | \t", substr(as.character(lst[i, 1]), 1, chars), " ... \n")
Sys.sleep(0.1)
}
cat("Please select the \'Number\' of the product: \n")
if(interactive()){
while (!(num %in% c(1:24))){
num = readline()
if (!(num %in% c(1:24))){
cat("Please enter a number between 1 and 24! \n")
}
}
} else {
num = 1
}
print(type(lst[num, 2]))
return(product_by_prodnum(lst[num, 2]))
}
x = product('eggs')
#' Get a product.
#'
#' This function retrieves a .json file for a product.
#' @param term The name of the product to search for.
#' @param chars The number of characters from the product name to print.
#' @param num The product number (1:24) to retrieve.
#' @param country The country code. Searches only for products in the given country.
#' @export
#' @examples
#' product()
product = function(term, chars=30, num=NA, country='world'){
lst = search_by_name(term, country)
cat("Number", "\t | \t", "Name", "\n")
cat("-------------------------", "\n")
for (i in 1:nrow(lst)){
cat(i, "\t | \t", substr(as.character(lst[i, 1]), 1, chars), " ... \n")
Sys.sleep(0.1)
}
cat("Please select the \'Number\' of the product: \n")
if(interactive()){
while (!(num %in% c(1:24))){
num = readline()
if (!(num %in% c(1:24))){
cat("Please enter a number between 1 and 24! \n")
}
}
} else {
num = 1
}
print(typeof(lst[num, 2]))
return(product_by_prodnum(lst[num, 2]))
}
x = product('eggs')
#' Get a product.
#'
#' This function retrieves a .json file for a product.
#' @param term The name of the product to search for.
#' @param chars The number of characters from the product name to print.
#' @param num The product number (1:24) to retrieve.
#' @param country The country code. Searches only for products in the given country.
#' @export
#' @examples
#' product()
product = function(term, chars=30, num=NA, country='world'){
lst = search_by_name(term, country)
cat("Number", "\t | \t", "Name", "\n")
cat("-------------------------", "\n")
for (i in 1:nrow(lst)){
cat(i, "\t | \t", substr(as.character(lst[i, 1]), 1, chars), " ... \n")
Sys.sleep(0.1)
}
cat("Please select the \'Number\' of the product: \n")
if(interactive()){
while (!(num %in% c(1:24))){
num = readline()
if (!(num %in% c(1:24))){
cat("Please enter a number between 1 and 24! \n")
}
}
} else {
num = 1
}
print(as.character(lst[num, 2]))
return(product_by_prodnum(lst[num, 2]))
}
x = product('eggs')
#' Product by Product Number
#'
#' If you already know the product number of the product you want, you can use this function to retrieve the .json.
#' @param prodnum The product number. Passed from product function.
#' @export
#' @examples
#' product_by_prodnum()
product_by_prodnum = function(prodnum, filters=''){
check_internet()
if (!(is.character(prodnum))){
stop("\'prodnum\' must be a string!")
}
url = build_URL(prodnum, filters)
return(jsonlite::fromJSON(txt=url))
}
y = product_by_prodnum("3178530416541")
#' Get a product.
#'
#' This function retrieves a .json file for a product.
#' @param term The name of the product to search for.
#' @param chars The number of characters from the product name to print.
#' @param num The product number (1:24) to retrieve.
#' @param country The country code. Searches only for products in the given country.
#' @export
#' @examples
#' product()
product = function(term, chars=30, num=NA, country='world'){
lst = search_by_name(term, country)
cat("Number", "\t | \t", "Name", "\n")
cat("-------------------------", "\n")
for (i in 1:nrow(lst)){
cat(i, "\t | \t", substr(as.character(lst[i, 1]), 1, chars), " ... \n")
Sys.sleep(0.1)
}
cat("Please select the \'Number\' of the product: \n")
if(interactive()){
while (!(num %in% c(1:24))){
num = readline()
if (!(num %in% c(1:24))){
cat("Please enter a number between 1 and 24! \n")
}
}
} else {
num = 1
}
return(product_by_prodnum(as.character(lst[num, 2])))
}
x = product('eggs')
