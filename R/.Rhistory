library(httr)
?GET
retrieve_countries = function(){
return(httr::GET('https://world.openfoodfacts.org/countries.json'))
}
retrieve_countries()
x = retrieve_countries()
x
print(x)
str(x)
x$output
content(x)
content(x, "text")
?content
content(x, "parsed")
content(x, "parsed")[1]
x = httr::GET('https://static.openfoodfacts.org/data/taxonomies/countries.json')
x
content(x, "parsed")
for (i in x){}
for (i in x){if (i$country_code_2){print(i$country_code_2)}}
for (i in x){print(i)}
for (i in x$country_code_2){print(i)}
str(x)
str(content(x))
content(x)
library(jsonlite)
jsonlite::fromJSON(txt=content(x))
jsonlite::fromJSON(txt=https://static.openfoodfacts.org/data/taxonomies/countries.json)
jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json', method='C')
jsonlite::fromJSON(file='https://static.openfoodfacts.org/data/taxonomies/countries.json', method='C')
jsonlite::fromJSON(file='https://static.openfoodfacts.org/data/taxonomies/countries.json')
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
x
??jsonlite
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json', simplifyDataFrame=TRUE)
x
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json', flatten=TRUE)
x
x[1]
x[2]
x[1][1]
x[1][2]
x[1]$country_code_2
x[1]$`en:eritrea`$country_code_2
x[1]$`en:eritrea`$country_code_2$en
x[1][1]$country_code_2$en
x[1,1]$country_code_2$en
x[1][1]$country_code_2$en
x[1][1]
x[1][1][1]
x[1]$`en:eritrea`$country_code_2$en
x[2]]$`en:eritrea`$country_code_2$en
x[2]$`en:eritrea`$country_code_2$en
retrieve_countries = function(){
x = httr::GET('https://static.openfoodfacts.org/data/taxonomies/countries.json')
x
return(y)
}
return(paste0('https://', country, '.openfoodfacts.org/api/v0/', '.json'))
build_URL = function(country = 'world'){
return(paste0('https://', country, '.openfoodfacts.org/api/v0/', '.json'))
}
build_URL()
x
x = retrieve_countries()
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
x
x[1]
str(x[1])
str(x[1][1])
str(unlist(x[1]))
unlist(x[1])
names(x[1])
y = names(x[1])
y
x[1]$`en:eritrea`
x[1]$y
x[1]$`y`
x[1]['en:aritrea']
x[1]['en:eritrea']
x[1][y]
x[1][names(x[1])]
x[1][names(x[1])]$country_code_2
x[1][names(x[1])]$country_code_2$en
x[1][names(x[1])]['country_code_2']['en']
x[1][names(x[1])]
x[1][names(x[1])]['country_code_2']
x[1][names(x[1])]$country_code_2
x[1][names(x[1])]
x[1]$names(x[1])
x[1]
x[1]$names(x[1])
x[1][names(x[1])]
names(x[1])
x[1]$`names(x[1])`
y = names(x[1])
x[1]$y
x[1][y]
x[1]
str(x[1])
x[1]$`en:eritrea`$country_code_2$en
x[1]$(names(x[1]))$country_code_2$en
x[1][names(x[1])]$country_code_2$en
x[1][names(x[1])]
x[1]['en:eritrea']
x[1]['en:eritrea', country_code_2]
x[1]['en:eritrea', 'country_code_2']
x[1]['en:eritrea', 'country_code_2', 'en']
x[1]['en:eritrea']['country_code_2']['en']
type(x)
class(x)
x[[1]]['en:eritrea']['country_code_2']['en']
x[[1]]
x[[1]][[1]]
x[[1]][[2]]
x[[2]][[2]]
x[[1]][['en:eritrea']]
x[[1]]['en:eritrea']
x[[1]]
x[[1]]$country_code_2
x[[1]]$country_code_2$en
x[[2]]$country_code_2$en
length(x)
retrieve_countries = function(){
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
y = c()
for (i in 1:length(x)){
if (x[[i]]$country_code_2$en){
y = c(y, x[[i]]$country_code_2$en)
}
}
return(y)
}
retrieve_countries()
for (i in 1:length(x)){
y = c(y, x[[i]]$country_code_2$en)
}
retrieve_countries = function(){
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
y = c()
for (i in 1:length(x)){
y = c(y, x[[i]]$country_code_2$en)
}
return(y)
}
retrieve_countries()
retrieve_countries = function(){
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
y = c()
for (i in 1:length(x)){
y = c(y, tolower(x[[i]]$country_code_2$en))
}
return(y)
}
retrieve_countries()
countries =
retrieve_countries = function(){
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
y = c()
for (i in 1:length(x)){
y = c(y, tolower(x[[i]]$country_code_2$en))
}
return(y)
}
retrieve_countries()
y = retrieve_countries()
y
dput(y)
countries = c("er", "ee", "ru", "is", "st", "pw", "kw", "iq", "by", "ae",
"gf", "tv", "lu", "ms", "pr", "re", "yu", "bj", "mw", "us", "ax",
"cy", "bi", "ar", "mm", "lb", "ir", "gn", "cf", "bz", "ca", "tg",
"cg", "it", "hr", "io", "ua", "gr", "at", "kh", "gs", "fo", "sc",
"aq", "dm", "mt", "cn", "bt", "mv", "gi", "pf", "bn", "pe", "sy",
"tz", "si", "bm", "be", "zw", "ci", "sm", "ro", "nz", "bs", "tj",
"in", "sb", "la", "dk", "bo", "vn", "am", "so", "vc", "aw", "eh",
"ml", "im", "uz", "ch", "rw", "ps", "rs", "ck", "il", "nu", "bw",
"np", "jo", "pt", "dj", "pl", "tf", "ky", "sh", "cu", "li", "et",
"zm", "py", "sd", "om", "eg", "gg", "mo", "hn", "mh", "gh", "mn",
"vg", "gm", "sn", "id", "ni", "kn", "gl", "cz", "mx", "to", "pn",
"nf", "bh", "qa", "jm", "ws", "ye", "um", "uk", "uy", "ke", "va",
"tc", "tr", "cv", "xk", "tn", "sk", "bl", "ag", "tl", "bg", "pg",
"nr", "kr", "my", "hk", "al", "fr", "tt", "bf", "world", "af",
"ai", "na", "md", "bb", "bq", "ki", "bd", "mz", "je", "yt", "wf",
"pa", "gq", "gy", "gu", "de", "do", "nl", "co", "ge", "cd", "tw",
"lk", "cc", "ma", "ly", "fk", "vu", "pm", "mp", "sl", "fi", "za",
"fm", "tk", "th", "no", "ie", "km", "ss", "au", "fj", "es", "lr",
"gp", "jp", "gt", "kg", "mk", "ba", "sv", "gw", "ug", "az", "pk",
"lc", "dz", "sa", "ec", "cm", "cx", "ht", "mf", "ls", "ph", "cw",
"mq", "kp", "cr", "ng", "lv", "mu", "lt", "ne", "bv", "se", "tm",
"vi", "sg", "hu", "ad", "sj", "nc", "sz", "ao", "cl", "ga", "br",
"sr", "ve", "as", "me", "kz", "mc", "mr", "gd", "td", "sx", "hm",
"mg")
countries
y == countries
update_countries = function(){
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
y = c()
for (i in 1:length(x)){
y = c(y, tolower(x[[i]]$country_code_2$en))
}
assign("countries", y, envir = .GlobalEnv)
}
update_countries()
countries
rm(countries)
update_countries()
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
x
x$`en:azerbaijan`$name$en
test = c(1,2,3,4)
test2 = c(5,6,7,8)
data.frame(test, test2)
update_countries = function(){
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
y = c()
z = c()
for (i in 1:length(x)){
y = c(y, tolower(x[[i]]$country_code_2$en))
z = c(z, x[[i]]$name$en)
}
a = data.frame(z, y)
assign("countries", a, envir = .GlobalEnv)
}
x = update_countries()
x
x$`en:eritrea`$name
x$`en:eritrea`$name[1]
update_countries = function(){
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
y = c()
z = c()
for (i in 1:length(x)){
y = c(y, tolower(x[[i]]$country_code_2$en))
z = c(z, x[[i]]$name[1])
}
a = data.frame(z, y)
assign("countries", a, envir = .GlobalEnv)
}
update_countries()
countries
x$`en:eritrea`$name[1]
x$`en:eritrea`$name[[1]]
update_countries()
countries
names(countries)
x$`en:eritrea`$name[[1]]
x$`en:eritrea`$name[[2]]
x$`en:eritrea`$name[[3]]
x[[1]]$name[[1]]
x[[2]]$name[[1]]
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
y = c()
z = c()
for (i in 1:length(x)){
y = c(y, tolower(x[[i]]$country_code_2$en))
z = c(z, x[[i]]$name[[1]])
}
y
z
data.frame(z, y)
length(z)
length(y)
y
x
x[[1]]$country_code_2$en
x[[2]]$country_code_2$en
x[[2]]$country_code_2[[1]]
update_countries = function(){
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
y = c()
z = c()
for (i in 1:length(x)){
y = c(y, tolower(x[[i]]$country_code_2[[1]]))
z = c(z, x[[i]]$name[[1]])
}
a = data.frame(z, y)
assign("countries", a, envir = .GlobalEnv)
}
for (i in 1:length(x)){
y = c(y, tolower(x[[i]]$country_code_2[[1]]))
z = c(z, x[[i]]$name[[1]])
}
z
y = c()
z = c()
for (i in 1:length(x)){
y = c(y, tolower(x[[i]]$country_code_2[[1]]))
z = c(z, x[[i]]$name[[1]])
}
z
y
data.frame(z, y)
tail(z)
tail(y)
tail(z, 10)
x$`en:chad`$country_code_2$en
for (i in 1:length(x)){
if(tolower(x[[i]]$country_code_2[[1]]))){}
for (i in 1:length(x)){
if(x[[i]]$country_code_2[[1]]){print(i)}
if(x[[i]]$name[[1]]){print(i)}
}
for (i in 1:length(x)){
if(!exists(x[[i]]$country_code_2[[1]])){print(i)}
if(!exists(x[[i]]$name[[1]])){print(i)}
}
x[[5]]
for (i in 1:length(x)){
if(exists(x[[i]]$country_code_2[[1]])){print(i)}
if(exists(x[[i]]$name[[1]])){print(i)}
}
?exists
exists(t)
exists(y)
exists(z)
get0(y)
get0(t)
get0("y")
exists("y")
x[[1]]$country_code_2[[1]]
x[[5]]$country_code_2[[1]]
x[[5]]$country_code_2[[1]] != NULL
x[[5]]$country_code_2[[1]] == NULL
x[[5]]$country_code_2[[1]] != "NULL"
is.null(x[[5]]$country_code_2[[1]])
!is.null(x[[5]]$country_code_2[[1]])
!is.null(x[[1]]$country_code_2[[1]])
update_countries = function(){
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
y = c()
z = c()
for (i in 1:length(x)){
if ((!is.null(x[[i]]$country_code_2[[1]])) & (!is.null(x[[i]]$name[[1]]))){
y = c(y, tolower(x[[i]]$country_code_2[[1]]))
z = c(z, x[[i]]$name[[1]])
}
}
a = data.frame(z, y)
assign("countries", a, envir = .GlobalEnv)
}
update_countries()
countries
x[[151]]
x[[149]]
x[[158]]
x[[158]]$name$en
x[[158]]$name$fr
x[[158]]$name[[1]]
update_countries = function(){
x = jsonlite::fromJSON(txt='https://static.openfoodfacts.org/data/taxonomies/countries.json')
y = c()
z = c()
for (i in 1:length(x)){
if ((!is.null(x[[i]]$country_code_2[[1]])) & (!is.null(x[[i]]$name$en))){
y = c(y, tolower(x[[i]]$country_code_2[[1]]))
z = c(z, x[[i]]$name$en)
}
}
a = data.frame(z, y)
assign("countries", a, envir = .GlobalEnv)
}
update_countries()
countries
